{"version":3,"sources":["redux/expressSlice.js","consts.js","components/ExpressCheck.js","components/Pagination.js","redux/paginationSlice.js","redux/fileCheckSlice.js","components/Table.js","components/FileCheck.js","App.js","redux/store.js","index.js"],"names":["initialState","expressCheckResult","isExpressChecking","expressCheckThunk","createAsyncThunk","a","anamnesis","fetch","method","headers","body","JSON","stringify","result","json","expressSlice","createSlice","name","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","selectIsExpressChecking","express","selectExpressCheckResult","ExpressCheck","useSelector","useState","setAnamnesis","dispatch","useDispatch","className","style","marginBottom","Form","Group","Label","Control","as","rows","onChange","e","target","value","Button","variant","disabled","onClick","length","patient","color","isDangerous","probability","factors","Pagination","setActivePageNumberAction","paginationInfo","countShowItem","firstPageBtn","lastPageBtn","prevPageBtn","nextPageBtn","ellipsisBtn","showLastPage","total","limit","current","paginationItemList","setPaginationItemList","portionCount","setPortionCount","activePortion","setActivePortion","useLayoutEffect","countPagination","Math","ceil","i","push","setActivePage","console","log","innerHTML","hasAttribute","prev","filter","el","map","next","slice","pagination","anamnesPagination","reducers","setTotalCountAction","setAnamnesTotalCountAction","setAnamnesActivePageNumberAction","PaginationReducer","reducer","actions","getAnamnesPaginationSelector","getPaginationSelector","isFileSending","tasksCount","currentTask","currentPatients","currentPatientsCount","tasks","sendFileThunk","formData","getTasksThunk","skip","take","setCounter","counter","getPatientsThunk","id","condStr","fileCheckSlice","setCurrentTask","setPatientsCount","clearCurrentPatients","count","patients","selecIsFileSending","fileCheck","selectTasks","selectTasksCount","selectCurrentTask","selectCurrentPatients","selectCurrentPatientsCount","Table","setIsShowTable","isShownAnamnes","setIsShownAnamnes","all","setAll","highDead","setHighDead","lowDead","setLowDead","task","anamnes","setAnamnes","patientsCount","paginationObj","setCondStr","useEffect","Array","from","viewBox","d","points","notDangerous","dangerous","index","backgroundColor","FileCheck","isShowTable","file","setFile","filePath","setFilePath","setTimeout","window","document","overflow","background","htmlFor","type","files","preventDefault","FormData","append","FileCheckItem","time","status","App","page","setPage","store","configureStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b9420e37.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { API_URL } from \"../consts\";\n\nconst initialState = {\n  expressCheckResult:null,\n  isExpressChecking: false\n}\n\nexport const expressCheckThunk = createAsyncThunk(\n    \"express/expressCheckThunk\",\n    async({anamnesis})=>{\n        let result = await fetch(`${API_URL}/api/express_check`,{\n            method:\"POST\",\n            headers:{\n                \"Content-Type\":\"application/json\"\n            }, \n            body:JSON.stringify({\n                anamnesis\n            })\n        })\n        return await result.json();\n    }\n)\n\nexport const expressSlice = createSlice({\n    name: \"express\",\n    initialState,\n    ...initialState,\n    extraReducers:(builder)=>{\n        builder.addCase(expressCheckThunk.fulfilled,(state, action)=>{\n            state.expressCheckResult = action.payload;\n            state.isExpressChecking = false;\n        })\n        builder.addCase(expressCheckThunk.pending,(state)=>{\n            state.isExpressChecking = true;\n        })\n    }\n})\n\nexport const selectIsExpressChecking = (state) => state.express.isExpressChecking;\nexport const selectExpressCheckResult = (state) => state.express.expressCheckResult\n\nexport default expressSlice.reducer;","// export const API_URL = \"http://82.146.44.166\"\nexport const API_URL = \"\"","import { Form, Button } from \"react-bootstrap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { expressCheckThunk, selectExpressCheckResult, selectIsExpressChecking } from \"../redux/expressSlice\"\nimport { useState } from \"react\";\nimport '../css/ExpressCheck.css'\n\n\nexport default function ExpressCheck(){\n    const isExpressChecking = useSelector(selectIsExpressChecking);\n    const [anamnesis, setAnamnesis] = useState(\"\");\n    const expressCheckResult = useSelector(selectExpressCheckResult);\n    const dispatch = useDispatch();\n\n    function sendHandle(){\n        if(anamnesis.length){\n            dispatch(expressCheckThunk({anamnesis}))\n        }\n    }\n    return (\n        <div className={'ExpressCheck'}>\n            <h3 style={{ marginBottom:\"3%\"}}>Прогноз смерти пациента</h3>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label className={'ExpressCheckLabel'}>Анамнез :</Form.Label>\n                    <Form.Control as=\"textarea\" className={'ExpressCheckTextarea'}  rows={3} onChange={\n                        (e)=>{\n                            setAnamnesis(e.target.value)\n                        }\n                    }/>\n                </Form.Group>\n                <Button\n                    variant=\"primary\"\n                    disabled={isExpressChecking}\n                    onClick={!isExpressChecking ? sendHandle : null}\n                    className={'ExpressCheckSendBtn'}\n                    >\n                    {isExpressChecking ? 'Обработка…' : 'Отправить'}\n                </Button>\n            </Form>\n            {expressCheckResult?.patient && <div className={'ExpressCheckResponse'}>\n                <p>Вероятность летального исхода: <span style={{color:expressCheckResult.patient.isDangerous ? \"red\":\"blue\"}}>{expressCheckResult.patient.probability|0}%</span></p>\n                <p>Факторы: {expressCheckResult.patient.factors}</p>\n            </div>}\n        </div>\n    )\n}\n\nconst componentStyle={\n    // margin:\"5%\",\n    // padding:\"3%\",\n    // border: \"1px groove blue\"\n}","import React, {useLayoutEffect, useState} from 'react'\r\nimport '../css/Pagination.css'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n/**\r\n * Пагинация страницы 'Home'\r\n * @param paginationObjectType {object} - инфа о пагинации\r\n * @param countShowItem - сколько показываем страниц в пагинаторе за раз\r\n * @param firstPageBtn - показываем ли кнопку для перехода на первую страницу\r\n * @param lastPageBtn - показываем ли кнопку для перехода на последнюю страницу\r\n * @param prevPageBtn - показываем ли кнопку для перехода на пред. страницу\r\n * @param nextPageBtn - показываем ли кнопку для перехода на след. страницу\r\n * @param ellipsisBtn - показываем ли троеточие\r\n * @param showLastPage - показываем ли последнюю страницу\r\n */\r\n\r\nexport const Pagination = ({\r\n                               setActivePageNumberAction,\r\n                            paginationInfo,\r\n                            countShowItem = 1,\r\n                            firstPageBtn = false,\r\n                            lastPageBtn = false,\r\n                            prevPageBtn = true,\r\n                            nextPageBtn = true,\r\n                            ellipsisBtn = false,\r\n                            showLastPage = true\r\n                        }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    /** @type {object} - пагинация\r\n     @default {totalKaseCount: 0, pageSize: 10, pageActiveNumber: 1}\r\n     @type {number} total - общее количество дел\r\n     @type {number} limit - количество дел на странице\r\n     @type {number} current - активная страница   */\r\n\r\n    /** проверка что активная страница не больше колличества страниц.  */\r\n    if (paginationInfo.total / paginationInfo.limit < +paginationInfo.current - 1) dispatch(setActivePageNumberAction('1'))\r\n\r\n    /** массив страниц пагинации.  */\r\n    const [paginationItemList, setPaginationItemList] = useState([])\r\n\r\n    /** общее количество порций.  */\r\n    const [portionCount, setPortionCount] = useState(1)\r\n\r\n    /** активная порция.  */\r\n    const [activePortion, setActivePortion] = useState(1)\r\n\r\n    /** инициализация paginationItemList / paginationItemList / activePortion.  */\r\n    useLayoutEffect(() => {\r\n        const countPagination = Math.ceil(paginationInfo.total / paginationInfo.limit)\r\n        const portionCount = Math.ceil(countPagination / countShowItem)\r\n        const activePortion = Math.ceil(+paginationInfo.current / countShowItem) - 1\r\n        let paginationItemList = []\r\n        for (let i = 1; i <= countPagination; i++) {\r\n            paginationItemList.push(i)\r\n        }\r\n\r\n        setPaginationItemList(paginationItemList)\r\n        setPortionCount(portionCount)\r\n        setActivePortion(activePortion)\r\n    }, [countShowItem, paginationInfo]);\r\n\r\n    /** обработка кликов в пагинации. */\r\n    const setActivePage = (e) => {\r\n        console.log(paginationInfo)\r\n        //\r\n        if (paginationInfo.total <= paginationInfo.limit) return\r\n        //\r\n        // console.log(e.target.innerHTML)\r\n\r\n        switch (e.target.innerHTML) {\r\n            case ' « ':\r\n                dispatch(setActivePageNumberAction(1))\r\n                break\r\n            case ' ‹ ':\r\n                if (+paginationInfo.current !== 1) {\r\n                    if (+paginationInfo.current > 1) {\r\n                        dispatch(setActivePageNumberAction(+paginationInfo.current - 1))\r\n                    }\r\n                }\r\n                break\r\n            case ' › ':\r\n                if (+paginationInfo.current !== paginationItemList.length) {\r\n                    dispatch(setActivePageNumberAction(+paginationInfo.current + 1))\r\n                }\r\n                break\r\n            case ' » ':\r\n                dispatch(setActivePageNumberAction(paginationItemList.length))\r\n                break\r\n            case ' ... ':\r\n                if (e.target.hasAttribute('prev')) {\r\n                    dispatch(setActivePageNumberAction((activePortion - 1) * countShowItem + 1))\r\n                } else {\r\n                    dispatch(setActivePageNumberAction((activePortion + 1) * countShowItem + 1))\r\n                }\r\n                break\r\n            default:\r\n\r\n                dispatch(setActivePageNumberAction(e.target.innerHTML))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`Pagination`}>\r\n            {firstPageBtn &&\r\n            <div onClick={setActivePage} className={`firstPageBtn` + ' ' + (activePortion > 1 ? false : `disabled`)}>\r\n                {' « '}\r\n            </div>}\r\n            {prevPageBtn &&\r\n            <div onClick={setActivePage}\r\n                 className={`prevPageBtn` + ' ' + (+paginationInfo.current === 1 ? `disabled` : false)}>\r\n                {' ‹ '}\r\n            </div>}\r\n            <div className={`pagesBox`}>\r\n\r\n                { paginationInfo.total === 0 && <div onClick={setActivePage} className={`pageNumber` + ' ' + `active`}> 1 </div>}\r\n\r\n                {ellipsisBtn && activePortion > 0 &&\r\n                <div onClick={setActivePage} className={`pageNumber`}> 1 </div>}\r\n\r\n                {ellipsisBtn && activePortion > 0 &&\r\n                // @ts-ignore\r\n                <div onClick={setActivePage} className={`ellipsisFirstBtn`} prev=''>{' ... '}</div>\r\n                }\r\n\r\n                {paginationItemList\r\n                    .filter((el) => el > activePortion * countShowItem && el < activePortion * countShowItem + countShowItem + 1)\r\n                    .map((el) => el === +paginationInfo.current\r\n                        ? (<div key={el} className={`pageNumber` + ' ' + `active`}>{el}</div>)\r\n                        : (<div key={el} onClick={setActivePage} className={`pageNumber`}>{el}</div>))\r\n                }\r\n\r\n                {ellipsisBtn && activePortion + 1 < portionCount && (\r\n                    //@ts-ignore*\r\n                    <div  onClick={setActivePage} className={`ellipsisLastBtn`} next=''>{' ... '}</div>)\r\n                }\r\n                {showLastPage && ellipsisBtn && activePortion < portionCount - 1 &&\r\n                <div onClick={setActivePage} className={`pageNumber`}> {paginationItemList.length} </div>\r\n                }\r\n            </div>\r\n            {nextPageBtn &&\r\n            <div\r\n                onClick={setActivePage}\r\n                className={`nextPageBtn` + ' ' + (+paginationInfo.current === paginationItemList.length ? `disabled` : false)}\r\n            >\r\n                {' › '}\r\n            </div>}\r\n            {lastPageBtn &&\r\n            <div onClick={setActivePage} className={`lastPageBtn` + ' ' +\r\n            (activePortion === portionCount - 1 ? `disabled` : false)}>\r\n                {' » '}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\n\r\nconst initialState = {\r\n    pagination: {\r\n        total: 110,\r\n        limit: 5,\r\n        current: 1\r\n    },\r\n    anamnesPagination: {\r\n        total: 110,\r\n        limit: 10,\r\n        current: 1\r\n    },\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'PaginationReducer',\r\n    initialState,\r\n    reducers: {\r\n        /** Установить в объект пагинации общее количество Дел {number} */\r\n        setTotalCountAction: (state, action) => {\r\n            state.pagination.total = action.payload;\r\n        },\r\n        /** Установить в объект пагинации активную страницу {number} */\r\n        setActivePageNumberAction: (state, action) => {\r\n            state.pagination.current = action.payload;\r\n        },\r\n        /** anamnes */\r\n        setAnamnesTotalCountAction: (state, action) => {\r\n            state.anamnesPagination.total = action.payload;\r\n        },\r\n        /** anamnes */\r\n        setAnamnesActivePageNumberAction: (state, action) => {\r\n            state.anamnesPagination.current = action.payload;\r\n        },\r\n    }\r\n})\r\n\r\nexport const PaginationReducer = slice.reducer\r\n\r\nexport const {\r\n    setTotalCountAction,\r\n    setActivePageNumberAction,\r\n    setAnamnesTotalCountAction,\r\n    setAnamnesActivePageNumberAction,\r\n} = slice.actions\r\n\r\nexport const getAnamnesPaginationSelector = (state) => state.PaginationReducer.anamnesPagination;\r\nexport const getPaginationSelector = (state) => state.PaginationReducer.pagination;\r\n\r\n\r\n// export const getTasksTHUNK = (take) => async (dispatch) => {\r\n//     try {\r\n//\r\n//     } catch (error) {\r\n//\r\n//     } finally {\r\n//\r\n//     }\r\n// }","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { API_URL } from \"../consts\";\nconst initialState = {\n    isFileSending: false,\n    tasksCount: 0,\n    currentTask: {},\n    currentPatients: [],\n    currentPatientsCount: 0,\n    tasks:[]\n}\n\n\nexport const sendFileThunk =  createAsyncThunk(\n    \"fileCheck/sendFileThunk\",\n    async({formData})=>{\n        const result = await fetch(`${API_URL}/api/tasks`,{\n            method:\"POST\",\n            body:formData\n        })\n        return await result.json();\n    }\n)\n\nexport const getTasksThunk = createAsyncThunk(\n    \"fileCheck/getTasksThunk\",\n    async({skip, take, setCounter, counter})=>{\n        let result =  await fetch(`${API_URL}/api/tasks?skip=${skip}&take=${take}&type=full`);\n        setCounter(counter-1)\n        return await result.json();\n    }\n)\n\nexport const getPatientsThunk = createAsyncThunk(\n    \"fileCheck/getPatientsThunk\",\n    async({skip, take, id, condStr})=>{\n        let result = await fetch(`${API_URL}/api/tasks/${id}?skip=${skip}&take=${take}${condStr}`)\n        return await result.json();\n    }\n)\n\nexport const fileCheckSlice = createSlice({\n    name: \"fileCheck\",\n    initialState,\n    ...initialState,\n    reducers:{\n        setCurrentTask:(state, action)=>{\n            state.currentTask=action.payload\n        },\n        setPatientsCount:(state, action)=>{\n            state.currentPatientsCount=action.payload;\n        },\n        clearCurrentPatients:(state)=>{\n            state.currentPatients = [];\n        }\n    },\n    extraReducers:(builder)=>{\n        builder.addCase(sendFileThunk.fulfilled,(state)=>{\n            state.isFileSending = false\n        });\n        builder.addCase(sendFileThunk.pending,(state)=>{\n            state.isFileSending = true\n        });\n        builder.addCase(getTasksThunk.fulfilled,(state, action)=>{\n            state.tasks = action.payload.tasks\n            state.tasksCount = action.payload.count\n        });\n        builder.addCase(getPatientsThunk.fulfilled,(state, action)=>{\n            console.log(action.payload);\n            state.currentPatients = action.payload.patients\n        })\n    }\n})\nexport const {setCurrentTask, setPatientsCount, clearCurrentPatients} = fileCheckSlice.actions;\n\nexport const selecIsFileSending = (state)=>state.fileCheck.isFileSending\nexport const selectTasks = (state)=>state.fileCheck.tasks\nexport const selectTasksCount = (state)=>state.fileCheck.tasksCount\nexport const selectCurrentTask = (state) => state.fileCheck.currentTask;\nexport const selectCurrentPatients = (state) => state.fileCheck.currentPatients\nexport const selectCurrentPatientsCount = (state) => state.fileCheck.currentPatientsCount\n\n\nexport default fileCheckSlice.reducer;","import React, {useEffect, useState} from 'react';\r\nimport '../css/Table.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getAnamnesPaginationSelector,\r\n    setActivePageNumberAction,\r\n    setAnamnesActivePageNumberAction,\r\n    setAnamnesTotalCountAction\r\n} from \"../redux/paginationSlice\";\r\nimport {Pagination} from \"./Pagination\";\r\nimport { clearCurrentPatients, getPatientsThunk, selectCurrentPatients, selectCurrentPatientsCount, selectCurrentTask } from '../redux/fileCheckSlice';\r\n\r\nexport const Table = ({setIsShowTable}) => {\r\n\r\n    const [isShownAnamnes, setIsShownAnamnes] = useState(false)\r\n    const [all, setAll] = useState(true)\r\n    const [highDead, setHighDead] = useState(false)\r\n    const [lowDead, setLowDead] = useState(false)\r\n    const task = useSelector(selectCurrentTask)\r\n    const patients = useSelector(selectCurrentPatients)\r\n    const [anamnes, setAnamnes] = useState(\"\")\r\n    const patientsCount = useSelector(selectCurrentPatientsCount)\r\n    const paginationObj = useSelector(getAnamnesPaginationSelector);\r\n    const [condStr, setCondStr] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const pagination = useSelector(getAnamnesPaginationSelector)\r\n    // useEffect(()=>{\r\n    //     if(all){\r\n    //         setLowDead(false);\r\n    //         setHighDead(false);\r\n    //         setCondStr(\"\");\r\n            \r\n    //     }\r\n    //     if(highDead){\r\n    //         setAll(false);\r\n    //         setLowDead(false);\r\n    //         setCondStr(\"&isDangerous=true\");\r\n    //     }\r\n    //     if(lowDead){\r\n    //         setAll(false);\r\n    //         setHighDead(false);\r\n    //         setCondStr(\"&isDangerous=false\");\r\n    //     }\r\n    //     dispatch(setAnamnesActivePageNumberAction(1))\r\n    // }, [all, highDead, lowDead])\r\n    useEffect(()=>{\r\n        dispatch(setAnamnesTotalCountAction(patientsCount))\r\n    }, [patientsCount])\r\n    useEffect(()=>{\r\n        dispatch(getPatientsThunk({skip:(paginationObj.current-1)*10, take:10, id:task.id, condStr}))\r\n    },[task, paginationObj.current, condStr])\r\n    useEffect(()=>{\r\n        dispatch(setAnamnesActivePageNumberAction(1));\r\n    },[])\r\n    return (\r\n        <div className={`Table`}>\r\n            <div className={`content`}>\r\n                <div className={`close`} onClick={()=>{\r\n                    setIsShowTable(false)\r\n                    dispatch(setAnamnesActivePageNumberAction(1))\r\n                    dispatch(clearCurrentPatients())\r\n                }}/>\r\n                <div className={`anamnes ${isShownAnamnes ? 'active' : ''}`}>\r\n                    <div className={`anamnesMain`}>\r\n                        {/* <pre style={{whiteSpace: \"normal\"}}>{anamnes}</pre> */}\r\n                        {Array.from(anamnes).map(el=>{\r\n                            if(el===\"\\n\") return <br/>\r\n                            else return el;\r\n                        })}\r\n                    </div>\r\n                    <div className={`anamnesHidden`} onClick={() => setIsShownAnamnes(false)}>\r\n                        <svg viewBox=\"0 0 490 490\">\r\n                            <path d=\"M254.436,0H0.389l235.564,245L0.389,490h254.047l235.176-245L254.436,0z M72.316,459.375L278.451,245L72.316,30.625h169.08\r\n\t\tL447.173,245L241.396,459.375H72.316z\"/>\r\n                            <polygon points=\"168.378,72.734 295.204,204.638 334.016,245.004 295.204,285.369 168.381,417.266 222.833,417.266\r\n\t\t388.195,245.003 222.833,72.734 \t\"/>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className={`Table_list`}>\r\n                    <div className={`Table_list_title`}>Таблица</div>\r\n                    <div className={`Table_filter`}>\r\n                        <div className={`${all}`} onClick={()=>{\r\n                            setAll(true)\r\n                            setLowDead(false);\r\n                            setHighDead(false);\r\n                            setCondStr(\"\");\r\n                            dispatch(setAnamnesTotalCountAction(task.notDangerous+task.dangerous))\r\n                        }}>Все</div>\r\n                        <div className={`${highDead}`} onClick={()=>{\r\n                            setHighDead(true)\r\n                            setAll(false);\r\n                            setLowDead(false);\r\n                            setCondStr(\"&isDangerous=true\");\r\n                            dispatch(setAnamnesTotalCountAction(task.dangerous))\r\n                        }}>Высокая вероятность смерти</div>\r\n                        <div className={`${lowDead}`} onClick={()=>{\r\n                            setLowDead(true)\r\n                            setAll(false);\r\n                            setHighDead(false);\r\n                            setCondStr(\"&isDangerous=false\");\r\n                            dispatch(setAnamnesTotalCountAction(task.notDangerous))\r\n                        }}>Низкая вероятность смерти</div>\r\n                    </div>\r\n                    <div className={`Table_list_head`}>\r\n                        <div>id</div>\r\n                        <div>анамнез</div>\r\n                        <div>факторы</div>\r\n                        <div>вероятность смерти</div>\r\n                    </div>\r\n                    {patients.map((el,index)=>\r\n                        <div className={`item`} style={{backgroundColor:`${el.isDangerous ? 'rgba(255, 0, 0, 0.44)':'rgba(0, 128, 0, 0.45)'}`}}>\r\n                            <div>{el.id}</div>\r\n                            <div className={`anamnesBtn`} onClick={() => {setIsShownAnamnes(true); setAnamnes(el.anamnesis)}}>смотреть</div>\r\n                            <div>{el.factors}</div>\r\n                            <div>{el.probability|0}%</div>\r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n                <Pagination setActivePageNumberAction={setAnamnesActivePageNumberAction} countShowItem={5} paginationInfo={pagination}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport '../css/FileCheck.css'\r\nimport {Pagination} from \"./Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getPaginationSelector, setTotalCountAction} from \"../redux/paginationSlice\";\r\nimport {Table} from \"./Table\";\r\nimport { getTasksThunk, selecIsFileSending, selectTasks, selectTasksCount, sendFileThunk, setCurrentTask, setPatientsCount } from '../redux/fileCheckSlice';\r\n\r\nexport const FileCheck = () => {\r\n    const pagination = useSelector(getPaginationSelector);\r\n    const isFileSending = useSelector(selecIsFileSending);\r\n    const tasksCount = useSelector(selectTasksCount)\r\n    const tasks = useSelector(selectTasks)\r\n    const paginationObj = useSelector(getPaginationSelector)\r\n\r\n    const [isShowTable, setIsShowTable] = useState(false)\r\n    const [counter, setCounter] = useState(-10000000)\r\n\r\n    const [file, setFile] = useState(null)\r\n    const [filePath, setFilePath] = useState('')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fileInputHandler = (e) =>{\r\n        setFilePath(e.target.value)\r\n        setFile(e.target.files[0])\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(counter===-10000000) dispatch(getTasksThunk({skip:(paginationObj.current-1)*10,take:10, setCounter, counter}))\r\n        else{\r\n            setTimeout(()=>{\r\n                dispatch(getTasksThunk({skip:(paginationObj.current-1)*10,take:10, setCounter, counter}))\r\n            }, 1000)\r\n        }\r\n    }, [counter])\r\n\r\n    useEffect(()=>{\r\n        dispatch(setTotalCountAction(tasksCount));\r\n    }, [tasksCount])\r\n\r\n    const sendFileHandler = (e) =>{\r\n        e.preventDefault()\r\n        if (!file || !filePath.length ) return\r\n        const formData = new FormData();\r\n        formData.append('file',file)\r\n        dispatch(sendFileThunk({formData}));\r\n        setFilePath('')\r\n        setFile(null)\r\n    }\r\n    useEffect(()=>{\r\n        if (isShowTable) {\r\n            window.document.body.style.overflow = 'hidden'\r\n        } else window.document.body.style.overflow = 'visible'\r\n    },[isShowTable])\r\n\r\n    return (\r\n        <div className={'FileCheck'}>\r\n            {isShowTable && <Table setIsShowTable={setIsShowTable}/>}\r\n            <div className={'FileCheck_File'}>\r\n                <div className={'FileCheck_addFilePath'}><span>Файл: </span>{!!filePath.length ? filePath : 'не выбран'}</div>\r\n                <label style={isFileSending ? { background:\"grey\" }: {}} htmlFor=\"checkFile\">{isFileSending ? \"Идет отправка...\" :\"Выбрать файл\"}<input id={'checkFile'} type=\"file\" onChange={fileInputHandler}/></label>\r\n                {!isFileSending && <div className={`FileCheck_send ${!!file}`}  onClick={sendFileHandler}> Отправить </div>}\r\n            </div>\r\n            <div className={`FileCheck_list`}>\r\n                <div className={`FileCheck_list_title`}>Список :</div>\r\n                <div className={`FileCheck_list_main`}>\r\n                    { tasks.map((el,index) => <FileCheckItem task={el} setIsShowTable={setIsShowTable}/>) }\r\n                </div>\r\n                <Pagination countShowItem={5} paginationInfo={pagination}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const FileCheckItem = ({setIsShowTable, task}) => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className={`FileCheck_list_item`} onClick={() => {\r\n            dispatch(setCurrentTask(task))\r\n            dispatch(setPatientsCount(task.dangerous+task.notDangerous))\r\n            setIsShowTable(true)\r\n            }}>\r\n            <div className={`FileCheck_list_date`}>{task.time}</div>\r\n            <div className={`FileCheck_list_status`}\r\n                style={{color:task.status===\"run\"?\"orange\":\"green\"}}>{task.status===\"run\"?\"Обработка\":\"Завершено\"}</div>\r\n            <div className={`FileCheck_list_itemMain`}>\r\n                <div className={`FileCheck_list_all`}><span>Всего: </span>{task.dangerous+task.notDangerous}</div>\r\n                <div className={`FileCheck_list_high`}style={{color:\"red\"}}><span>Высокая вероятность смерти: </span>{task.dangerous}</div>\r\n                <div className={`FileCheck_list_low`}style={{color:\"blue\"}}><span>Низкая вероятность смерти: </span>{task.notDangerous}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\nimport './css/App.css';\nimport ExpressCheck from './components/ExpressCheck';\nimport {FileCheck} from \"./components/FileCheck\";\n\nfunction App() {\n    const [page, setPage] = useState('text')\n    return (\n        <div className={'App'}>\n            <div className={'header'}><h1>Golden Rain Analyser</h1></div>\n\n            <div className={'content'}>\n                <div className={'changePage'}>\n                    <div onClick={()=>setPage('text')} className={`changePageBtn ${page === 'text'}`}>Текст</div>\n                    <div onClick={()=>setPage('file')} className={`changePageBtn ${page === 'file'}`}>Файл</div>\n                </div>\n                {page === 'text' && <ExpressCheck/>}\n                {page === 'file' && <FileCheck/>}\n            </div>\n        </div>\n    );\n}\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport expressSlice from './expressSlice';\nimport {PaginationReducer} from \"./paginationSlice\";\nimport fileCheck from './fileCheckSlice';\n\nexport const store = configureStore({\n  reducer: {\n    express: expressSlice,\n    PaginationReducer: PaginationReducer,\n    fileCheck: fileCheck\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}